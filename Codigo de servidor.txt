#include <mysql.h>
#include <sys/types.h> 
#include <sys/socket.h> 
#include <netinet/in.h> 
#include <stdio.h>
#include <mysql.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <mysql/mysql.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdbool.h>
#include <netinet/in.h>
#include <pthread.h>

//ESTRUCTURAS

typedef struct
{
	int *sock;
	char Nombre[20];
} Cliente;
typedef struct
{
	Cliente cliente[100];
	int numero_clientes;
	
} Cliente_Lista;



typedef struct {
	char dato[20];
	
}Dato;

typedef struct {
	int rows;
	int cols;
	Dato data[10][10]; 
} Matriz;

// VARIABLES GLOBALES
int contador;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
char clientes[300];
bool login = false;
MYSQL *conn;
Cliente cliente;
Cliente_Lista Clis;
int i;
int Socket[100];
char peticion[512];
char respuesta[512];

// FUNCIONES

void conectarBD() {
	
	conn = mysql_init(NULL);
	if (conn==NULL) {
		printf ("Error al crear la conexion: %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	conn = mysql_real_connect (conn, "localhost","root", "mysql", NULL, 0, NULL, 0);
	if (conn==NULL)
	{
		printf ("Error al inicializar la conexion: %u %s\n",
				mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
}

void ejecutarConsultaSQL(char *sql) {
	if (mysql_query(conn, sql) != 0) {
		fprintf(stderr, "Error en la consulta: %s\n", mysql_error(conn));
		mysql_close(conn);
		exit(EXIT_FAILURE);
	}
}


int ejecutarConsulta(char *sql, Matriz *matriz) {
	MYSQL_RES *res;
	MYSQL_ROW *row;
	int err = mysql_query(conn, sql);
	if (err != 0) {
		printf("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit(1);
	}
	res = mysql_store_result(conn);
	
	if (res == NULL) {
		printf("Error al obtener el resultado de la consulta\n");
		
		return -1;
		exit(1);
	}
	
	int num_rows = mysql_num_rows(res);
	int num_fields = mysql_num_fields(res);
	
	int i = 0;
	while ((row = mysql_fetch_row(res)) != NULL && i < 100) {
		for (int j = 0; j < num_fields; j++) {
			
			if (row[j] != NULL) {
/*				strcpy(matriz->data[i][j].dato, row[j]);*/
				return 1;
			}
			else {return -1;}
		}
		i++;
	}
	
	mysql_free_result(res);
	
	return 1;
}


void *AtenderCliente (void *socket)
{
	int sock_conn;
	int *s;
	s= (int *) socket;
	sock_conn= *s;	
	int ret;
	
	int terminar =0;
	// Entramos en un bucle para atender todas las peticiones de este cliente
	//hasta que se desconecte
	while (terminar ==0)
	{
		// Ahora recibimos la petici\ufff3n
		ret=read(sock_conn,peticion, sizeof(peticion));
		printf ("Recibido\n");
		
		// Tenemos que a\ufff1adirle la marca de fin de string 
		// para que no escriba lo que hay despues en el buffer
		peticion[ret]='\0';
		
		
		printf ("Peticion: %s\n",peticion);
		
		// vamos a ver que quieren
		char *p = strtok( peticion, "/");
		int codigo =  atoi (p);
		
		// Ya tenemos el c\ufff3digo de la petici\ufff3n
		char Nombre[20];
		char Contrasenya[20];
		if (codigo !=0)
		{
			
			p = strtok( NULL, "/");
			strcpy (Nombre, p);
			p = strtok( NULL, "/");
			strcpy (Contrasenya, p);
			// Ya tenemos el nombre
			printf ("Codigo: %d, Nombre: %s, Contrasenya; %s\n", codigo, Nombre, Contrasenya);
		}
		else{
			p = strtok( NULL, "/");
			strcpy (Nombre, p);
		}
		if (codigo ==0) //petici\ufff3n de desconexi\ufff3n
		{
			int k;
			for (k = 0; k < 10; k++) {
				
				if(strcmp(Clis.cliente[k].Nombre, Nombre) == 0)
				{
					int x;
					for(x = k;  x < Clis.numero_clientes-1; x++)
					{
						strcpy(Clis.cliente[k].Nombre, Clis.cliente[k+1].Nombre);
						Clis.cliente[k].sock = Clis.cliente[k+1].sock;
					}
					sprintf(Clis.cliente[k+1].Nombre, '\0');
					Clis.cliente[k+1].sock = 0;
					
					
					Clis.numero_clientes--;
					
					
				}
				k++;
				
			}
			
			contador --;
			
			char restantes[300];
			sprintf(restantes, "0/");
			int p;
			for (p = 0; p < Clis.numero_clientes; p++) {
				sprintf(restantes +strlen(restantes), "/%s", Clis.cliente[p].Nombre);
				
				/*write(Socket[l], conectados, strlen(conectados));*/
				
			}
			
			printf(restantes);
			// Enviamos respuesta
			write (sock_conn,restantes, strlen(restantes));
			terminar=1;
			
		}
		else if (codigo == 1) //piden la longitd del nombre
		{
			char comando[100];
			sprintf(comando, "SELECT NOMBRE FROM jugadores WHERE NOMBRE = '%s' AND CONTRASENYA = '%s'", Nombre, Contrasenya);
			printf("SELECT NOMBRE FROM jugadores WHERE NOMBRE = '%s' AND CONTRASENYA = '%s'", Nombre, Contrasenya);
			
			Matriz *matriz;
			
			if(ejecutarConsulta(comando, matriz) == 1){
				int g;
				bool existente;
				for(g = 0; g < Clis.numero_clientes; g++)
				{
					if(strcmp(Clis.cliente[Clis.numero_clientes].Nombre, Nombre) == 0)
					{existente = true;}
				}
				if(existente == true)
				{sprintf (respuesta, "1/Bienvenido de nuevo %s, su session ya ha sido iniciada correctamente.", Nombre);}
				else{
					
				
				sprintf(Clis.cliente[Clis.numero_clientes].Nombre, Nombre); 
				Clis.numero_clientes++;
				sprintf (respuesta, "1/Bienvenido de nuevo %s, su session ha sido iniciada correctamente.", Nombre);
				
				
				pthread_mutex_lock( &mutex ); //No me interrumpas ahora
				
				
				contador = contador +1;
				pthread_mutex_unlock( &mutex); 
				char notificacion[20];
				sprintf (notificacion, "4/%d/%s",contador, NULL);
				int j;
				for (j=0; (j-1)< i; j++)
					/*write (Socket[j],notificacion, strlen(notificacion));*/
				{login = true;}
				// Supongamos que MAX_SIZE es el tama\uffef\uffbf\uff83\uffef\uffbe\uffb1o m\uffef\uffbf\uff83\uffef\uffbe\uffa1ximo del arreglo
				}
				
				
				
				Give_Me_Onlines(Clis, clientes);
				
			}
			else
			{
				sprintf (respuesta, "1/Ha escrito mal su usuario o Contrasenya");
				
			}
		}		
		
		
		else if (codigo ==2)
		{
			char comando[100];
			sprintf(comando, "SELECT NOMBRE FROM jugadores WHERE NOMBRE = '%s'", Nombre);
			Matriz *matriz;
			if(ejecutarConsulta(comando, matriz) == NULL)
			{sprintf(respuesta, "2/este usuario ya existe");
			}
			else
			{
				char comando[100];
				sprintf(comando, "INSERT INTO jugadores (NOMBRE, CONTRASENYA) VALUES ('%s', '%s')", Nombre, Contrasenya);
				ejecutarConsultaSQL(comando);
				sprintf (respuesta, "2/Hola, Gracias por registrarte en nuestro juego");
				
			}
		}
		
		
		if (codigo !=0)
		{
			printf ("Respuesta: %s\n", respuesta);
			// Enviamos respuesta
			write (sock_conn,respuesta, strlen(respuesta));
			
			
		}
		terminar =1;
		
		
	}close(sock_conn); 
	
	// Se acabo el servicio para este cliente
	
}




void Give_Me_Onlines(Cliente_Lista Clis, char conectados[300]) {
	
	
	int h;
	for (h = 0; h < 300; h++) {
		conectados[h] = '\0';
	}
	int l;
	for (l = 0; l < Clis.numero_clientes; l++) {
		sprintf(conectados +strlen(conectados), "/%s", Clis.cliente[l].Nombre);
		
	}printf(conectados);
	sprintf(respuesta + strlen(respuesta), conectados);
}


int main(int argc, char *argv[])
{
	
	conectarBD();
	// Ejecutar la consulta para crear la base de datos y las tablas
	ejecutarConsultaSQL("DROP DATABASE IF EXISTS JUEGO");
	ejecutarConsultaSQL("CREATE DATABASE JUEGO");
	ejecutarConsultaSQL("USE JUEGO");
	ejecutarConsultaSQL("CREATE TABLE jugadores(ID INTEGER PRIMARY KEY AUTO_INCREMENT, NOMBRE varchar(20) not null, CONTRASENYA varchar(20)not null, PUNTOS integer, VICTORIAS integer)");
	ejecutarConsultaSQL("CREATE TABLE partidas(ID integer primary key not null, FECHA varchar(20), TIEMPO time, JUGADORES integer)");
	ejecutarConsultaSQL("CREATE TABLE relacionjp (ID integer primary key not null, ID_J integer not null, foreign key (ID_J) references jugadores(ID), ID_P integer not null, foreign key (ID_P) references partidas(ID))");
	
	// Insertar datos en las tablas
	ejecutarConsultaSQL("INSERT INTO jugadores (ID, NOMBRE, CONTRASENYA, PUNTOS, VICTORIAS) VALUES (1, 'pol', 'contra', 100, 10), (2, 'Jugador2', 'contrasenya', 200, 15), (3, 'Jugador3', 'contrasenya3', 150, 12)");
	ejecutarConsultaSQL("INSERT INTO partidas (ID, FECHA, TIEMPO, JUGADORES) VALUES (1, '03-01', '12:00:00', 3), (2, '03-02', '15:30:00', 2), (3, '03-03', '18:45:00', 1)");
	ejecutarConsultaSQL("INSERT INTO relacionjp (ID, ID_J, ID_P) VALUES (1, 1, 1), (2, 2, 1)");
	
	
	int sock_conn, sock_listen;
	struct sockaddr_in serv_adr;
	
	
	
	if ((sock_listen = socket (AF_INET, SOCK_STREAM, 0)) < 0)
	{printf("Error creant socket");}
	
	
	memset(&serv_adr, 0, sizeof(serv_adr)); // inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	
	
	serv_adr.sin_addr.s_addr = htonl (INADDR_ANY);
	serv_adr.sin_port = htons (8095);
	
	if (bind (sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	
	if (listen (sock_listen, 3) < 0) 
		printf("Error en el Listen");
	
	
	
	
	
	pthread_t  thread;
	i=0;
	for (;;){
		
		printf ("Escuchando\n");
		sock_conn = accept (sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		//sock_conn es el socket que usaremos para este cliente
		Clis.cliente[i].sock = sock_conn;
			Socket[i] = sock_conn;	
			pthread_create(&thread, NULL, AtenderCliente, &Socket[i]);
		
		/*Give_Me_Onlines(Clis, clientes);*/
		
		i++;
		login = false;
	}
	
	/*	for (i=0;i<4;i++)*/
	/*	{*/
	/*		pthread_join (thread[i], NULL)*/
	/*	}*/
	
	mysql_close(conn);
	
}

